name: Auto Merge Develop to Check2

on:
  schedule:
    # Ch·∫°y l√∫c 17:00 gi·ªù Vi·ªát Nam (UTC+7) = 10:00 UTC
    - cron: '0 10 * * 4'
  workflow_dispatch: # Cho ph√©p ch·∫°y th·ªß c√¥ng

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    outputs:
      merge_success: ${{ steps.merge.outputs.merge_success }}
      has_changes: ${{ steps.merge.outputs.has_changes }}
      merge_message: ${{ steps.merge.outputs.merge_message }}
      latest_commit: ${{ steps.commit_info.outputs.latest_commit }}
      new_commits: ${{ steps.commit_info.outputs.new_commits }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
    
    - name: Fetch all branches
      run: |
        git fetch --all
        git branch -r
    
    - name: Switch to check2 branch
      run: |
        git checkout check2
        git pull origin check2
    
    - name: Check for changes and merge
      id: merge
      run: |
        echo "Starting merge from develop to check2..."
        
        if git diff --quiet check2 origin/develop; then
          echo "merge_success=true" >> $GITHUB_OUTPUT
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "merge_message=‚ÑπÔ∏è No changes detected between develop and check2" >> $GITHUB_OUTPUT
          echo "No changes to merge."
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
          if git merge origin/develop --no-ff -m "Auto merge: develop -> check2 ($(date '+%Y-%m-%d %H:%M:%S'))"; then
            echo "merge_success=true" >> $GITHUB_OUTPUT
            echo "merge_message=‚úÖ Successfully merged develop into check2" >> $GITHUB_OUTPUT
            
            # Push changes
            git push origin check2
            echo "Changes pushed to check2 branch"
          else
            echo "merge_success=false" >> $GITHUB_OUTPUT
            echo "merge_message=‚ùå Merge conflict detected when merging develop into check2" >> $GITHUB_OUTPUT
            
            git merge --abort
          fi
        fi
    
    - name: Get commit info
      id: commit_info
      run: |
        if [ "${{ steps.merge.outputs.merge_success }}" == "true" ]; then
          LATEST_COMMIT=$(git log -1 --pretty=format:"%h - %s (%an)")
          echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          
          if [ "${{ steps.merge.outputs.has_changes }}" == "true" ]; then
            NEW_COMMITS=$(git log check2~1..check2 --oneline | head -10)
            echo "new_commits<<EOF" >> $GITHUB_OUTPUT
            echo "$NEW_COMMITS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "new_commits=No new commits to merge" >> $GITHUB_OUTPUT
          fi
        fi

  notify-merge-result:
    needs: auto-merge
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Get current time
      id: current_time
      run: |
        echo "time=$(TZ='Asia/Ho_Chi_Minh' date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
    
    - name: Send Slack notification on success with changes
      if: needs.auto-merge.outputs.merge_success == 'true' && needs.auto-merge.outputs.has_changes == 'true'
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "<!channel> üöÄ Auto Merge Success",
            "attachments": [
              {
                "color": "good",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "develop ‚Üí check2",
                    "short": true
                  },
                  {
                    "title": "Status",
                    "value": "${{ needs.auto-merge.outputs.merge_message }}",
                    "short": false
                  },
                  {
                    "title": "Time",
                    "value": "${{ steps.current_time.outputs.time }} (Vietnam Time)",
                    "short": true
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Send Slack notification on success without changes
      if: needs.auto-merge.outputs.merge_success == 'true' && needs.auto-merge.outputs.has_changes == 'false'
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "<!channel> ‚ÑπÔ∏è Auto Merge Check - No Changes",
            "attachments": [
              {
                "color": "#36a64f",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "develop ‚Üí check2",
                    "short": true
                  },
                  {
                    "title": "Status",
                    "value": "${{ needs.auto-merge.outputs.merge_message }}",
                    "short": false
                  },
                  {
                    "title": "Time",
                    "value": "${{ steps.current_time.outputs.time }} (Vietnam Time)",
                    "short": true
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Send Slack notification on failure
      if: needs.auto-merge.outputs.merge_success == 'false'
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "<!channel> ‚ö†Ô∏è Auto Merge Failed",
            "attachments": [
              {
                "color": "danger",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "develop ‚Üí check2",
                    "short": true
                  },
                  {
                    "title": "Error",
                    "value": "${{ needs.auto-merge.outputs.merge_message }}",
                    "short": false
                  },
                  {
                    "title": "Time",
                    "value": "${{ steps.current_time.outputs.time }} (Vietnam Time)",
                    "short": true
                  },
                  {
                    "title": "Action Required",
                    "value": "Manual intervention needed to resolve merge conflicts",
                    "short": false
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # deploy-to-server:
  #   needs: [auto-merge, notify-merge-result]
  #   runs-on: ubuntu-latest
  #   if: needs.auto-merge.outputs.merge_success == 'true' && needs.auto-merge.outputs.has_changes == 'true'
    
  #   steps:
  #   - name: Deploy to server
  #     uses: appleboy/ssh-action@v1.0.3
  #     with:
  #       host: ${{ secrets.SERVER_HOST }}
  #       username: ${{ secrets.SERVER_USERNAME }}
  #       key: ${{ secrets.SERVER_SSH_KEY }}
  #       port: ${{ secrets.SERVER_PORT }}
  #       script: |
  #         cd ${{ secrets.SERVER_PROJECT_PATH }}
  #         git fetch origin
  #         git checkout check2
  #         git pull origin check2
  #         echo "Deployment completed at $(date)"

  # notify-deployment-result:
  #   needs: [auto-merge, deploy-to-server]
  #   runs-on: ubuntu-latest
  #   if: always() && needs.auto-merge.outputs.merge_success == 'true' && needs.auto-merge.outputs.has_changes == 'true'
    
  #   steps:
  #   - name: Get current time
  #     id: current_time
  #     run: |
  #       echo "time=$(TZ='Asia/Ho_Chi_Minh' date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
    
  #   - name: Send deployment success notification
  #     if: needs.deploy-to-server.result == 'success'
  #     uses: 8398a7/action-slack@v3
  #     with:
  #       status: custom
  #       custom_payload: |
  #         {
  #           "text": "<!channel> üöÄ Deployment Success",
  #           "attachments": [
  #             {
  #               "color": "good",
  #               "fields": [
  #                 {
  #                   "title": "Repository",
  #                   "value": "${{ github.repository }}",
  #                   "short": true
  #                 },
  #                 {
  #                   "title": "Branch",
  #                   "value": "check2",
  #                   "short": true
  #                 },
  #                 {
  #                   "title": "Status",
  #                   "value": "‚úÖ Successfully deployed check2 branch to server",
  #                   "short": false
  #                 },
  #                 {
  #                   "title": "Server",
  #                   "value": "${{ secrets.SERVER_HOST }}",
  #                   "short": true
  #                 },
  #                 {
  #                   "title": "Time",
  #                   "value": "${{ steps.current_time.outputs.time }} (Vietnam Time)",
  #                   "short": true
  #                 }
  #               ]
  #             }
  #           ]
  #         }
  #     env:
  #       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
  #   - name: Send deployment failure notification
  #     if: needs.deploy-to-server.result == 'failure'
  #     uses: 8398a7/action-slack@v3
  #     with:
  #       status: custom
  #       custom_payload: |
  #         {
  #           "text": "<!channel> ‚ö†Ô∏è Deployment Failed",
  #           "attachments": [
  #             {
  #               "color": "danger",
  #               "fields": [
  #                 {
  #                   "title": "Repository",
  #                   "value": "${{ github.repository }}",
  #                   "short": true
  #                 },
  #                 {
  #                   "title": "Branch",
  #                   "value": "check2",
  #                   "short": true
  #                 },
  #                 {
  #                   "title": "Status",
  #                   "value": "‚ùå Failed to deploy check2 branch to server",
  #                   "short": false
  #                 },
  #                 {
  #                   "title": "Server",
  #                   "value": "${{ secrets.SERVER_HOST }}",
  #                   "short": true
  #                 },
  #                 {
  #                   "title": "Time",
  #                   "value": "${{ steps.current_time.outputs.time }} (Vietnam Time)",
  #                   "short": true
  #                 },
  #                 {
  #                   "title": "Action Required",
  #                   "value": "Check server connection and deployment logs",
  #                   "short": false
  #                 }
  #               ]
  #             }
  #           ]
  #         }
  #     env:
  #       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
